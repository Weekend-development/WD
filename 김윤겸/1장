# 좋은 소프트웨어 모듈이 되기 위한 조건

1. 실행 중에 제대로 동작하는 것 (모듈의 존재 이유) - 제대로 동작하는 것에는 예외처리도 포함이 되어있는 건가..
2. 변경을 위해 존재하는 것 (간단한 작업만으로도 변경이 가능해야 한다.) - 결합도가 낮고 응집도가 높아야 함을 의미하는 것 같다.
3. 코드를 읽는 사람과 의사소통하는 것 (특별한 훈련 없이도 개발자가 쉽게 읽고 이해할 수 있어야 한다.) - 나만 알아볼 수 있는 코드를 짜면 안된다는 뜻이다.

내가 생각하기에는 조건에 성능도 중요한 것 같다. 성능이 좋지 않으면 결국 사람들에게 선택되지 않는다.
(실제 면접 때 받았던 질문이다.)

# 변경에 취약한 코드
변경에 취약한 코드랑 객체와 객체간에 지나치게 의존하여 하나를 변경하면 다른 하나도 변경해야하는 것을 말한다.

이것을 의존성과 관련된 문제라고 한다. 

하지만 의존성을 완전히 없애는 것이 정답은 아니다. 객체지향 설계는 서로 의존하면서 협력하는 객체들의 공동체를 구축하는 것이다.
따라서 애플리케이션의 기능을 구현하는데 필요한 최소한의 의존성만 유지하는 것. 불필요한 의존성은 제거해야한다.

# 캡슐화
개념적이나 물리적으로 내부의 세부적인 사항을 감추는 것을 캡슐화라 부른다. 

캡슐화의 목적은 변경하기 쉬운 객체를 만드는 것이다. (객체 내부로의 접근을 차단하여 결합도를 낮춘다.)

# 응집도
밀접하게 연관된 작업만을 수행하고 연관성 없는 작업은 다른 객체에게 위임하는 객체를 가리켜 응집도가 높다고 한다.

자신의 데이터를 스스로 처리하는 자율적인 객체를 만들면 결합도를 낮출 수 있을 뿐더러 응집도를 높일 수 있다.

# 절차지향과 객체지향
프로세스와 데이터를 별도의 모듈에 위치시키는 방식을 절차적 프로그래밍이라고 한다. (데이터를 중심으로 함수를 만든다.)

절차적 프로그래밍은 직관적이지 못하다. 따라서 코드를 읽는 사람과 의사소통이 힘들다.

자신의 데이터를 스스로 처리하고 데이터와 프로세스가 동일한 모듈에 위치하는 것이 객체지향 프로그래밍이다.

객체지향의 핵심은 캡슐화를 이용하여 의존성을 적절히 관리함으로써 객체 사이의 결합도를 낮추는 것..
 

 


