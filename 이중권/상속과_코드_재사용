# 상속과 코드 재사용

## 상속과 중복 코드
- DRY 원칙 (Don't Repeat Yourself)
중복 여부를 판단하는 기준은 변경이다. 

## 상속을 이용해서 중복 코드 제거
- 상속을 통해 중복되는 코드를 제거할 수 있지만, 구현이 강하게 결합되어 변경에 취약해진다.
- 상속 관계로 연결된 클래스간의 변경에 취약해지는 현상을 취약한 기반 클래스 문제라고 부른다.

## 취약한 기반 클래스 문제
- 부모 클래스의 작은 변경에도 자식 클래스는 컴파일 오류와 실행 에러가 빈번히 발생
- 객체지향 프로그래밍의 근본적인 취약성
- 대표적인 예 (java.util.Properties와 java.util.Stack / java.util.Properties와 java.util.Hashtable)

## 상속을 위한 경고
1. 자식 클래스의 메서드 안에서 super 참조를 이용해 부모 클래스의 메서드를 직접 호출할 경우 두 클래스는 강하게 결합된다. super 호출을 제거할 수 있는 방법을 찾아 결합도를 제거하라.
2. 상속받은 부모 클래스의 메서드가 자식 클래스의 내부 구조에 대한 규칙을 깨트릴 수 있다.
3. 자식 클래스가 부모 클래스의 메서드를 오버라이딩할 경우 부모 클래스가 자신의 메서드를 사용하는 방법에 자식 클래스가 결합될 수 있다.
4. 클래스를 상속하면 결합도로 인해 자식 클래스와 부모 클래스의 구현을 영원히 변경하지 않거나, 자식 클래스와 부모 클래스를 동시에 변경하거나 둘 중 하나를 선택할 수 밖에 없다.

## 중복을 제거하기 위해 상속을 도입할 떄 따르는 두 가지 원칙
1. 두 메서드가 유사하게 보인다면 차이점을 메서드로 추출하라. 메서드 추출을 통해 두 메서드를 동일한 형태로 보이도록 만들 수 있다.
2. 부모 클래스의 코드를 하위로 내리지 말고 자식 클래스의 코드를 상위로 올려라. 부모 클래스의 구체적인 메서드를 자식 클래스로 내리는 것보다 자식 클래스의 추상적인 메서드를 부모 클래스로 올리는 것이 재사용성과 응집도 측면에서 더 뛰어난 결과를 얻을 수 있다.

## 차이에 의한 프로그래밍
- 기존 코드와 다른 부분만을 추가함으로써 애플리케이션의 기능을 확장하는 방법을 `차이에 의한 프로그래밍`이라고 부른다.
- 상속의 단점을 피하면서도 코드를 재사용할 수 있는 방법은 `합성`이다.
