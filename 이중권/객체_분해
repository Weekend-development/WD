추상화 : 불필요한 정보를 제거하고 문제 해결에 필요한 핵심만 남기는 작업

분해 : 큰 문제를 해결 가능한 작은 문제로 나누는 작업

## 프로시저 추상화와 데이터 추상화
- 현대적인 프로그래밍 언어를 특정짓는 두 가지 추상화 메커니즘은 `프로시저 추상화`와 `데이터 추상화`이다
    - 프로시저 추상화 : 무엇을 해야하는지 추상화
    - 데이터 추상화 : 무엇을 알아야 하는지 추상화

## 시스템을 분해 하는 방법
- 프로시저 추상화와 데이터 추상화 중 선택
- 프로시저 추상화(알고리즘 분해)를 중심으로 분해 한다면 기능 분해
- 데이터 추상화를 중심으로하면 타입을 추상화 또는 프로시저 추상화 하는 것이다. (전자는 추상 데이터 타입, 후자는 객체지향 이라고 부른다.)

## 하향식 기능 분해의 문제점
- 시스템은 하나의 메인 함수로 구성하지 않는다.
- 기능 추가 또는 요구사항 변경은 메인함수를 빈번하게 수정하도록 한다.
- 비즈니스 로직이 사용자 인터페이스와 강하게 결합된다.
- 너무 이른시기에 함수들의 실행 순서를 고정시켜서 유연성과 재사용성이 저하된다.
    - 객체지향은 함수간의 호출 순서가 아니라 객체 사이의 논리적인 관계를 중심으로 설계를 이끌어 간다.
- 데이터 형식이 변경될 경우 파급효과를 예측할 수 없다.
    - 하향식 기능 분해의 가장 큰 문제점 : 어떤 데이터를 어떤 함수가 사용하는지 추적하기 어려워서 결과를 예상할 수 없다.
    - 데이터 변경으로 인한 영향을 최소화하려면 잘 정의된 퍼블릭 인터페이스를 통해 데이터에 대한 접근을 통제해야 한다.
- 하나의 알고리즘을 구현하거나 배치 처리를 구현하기에는 적합하지만, 현대적인 상호작용 시스템을 개발하는데 적합하지 않다.
> 하향식 설계와 관련된 모든 문제의 원인은 `결합도` 이다.

## 하향식 분해가 유용한 경우
- 설계가 어느 정도 안정화되어 있다면 설계의 다양한 측면을 논리적으로 설명하고 문서화하기에 용이하다.

## 모듈
- 모듈은 서브 프로그램이라기 보다는 책임의 할당이다.
- 모듈이 감춰야하는 두 가지 비밀
    - 복잡성 : 외부에 모듈을 추상화할 수 있는 간단한 인터페이스를 제공해서 모듈의 복잡도를 낮춘다.
    - 변경 가능성 : 변경 발생 시 하나의 모듈만 수정하면 되도록 변경 가능한 설계 결정을 모듈 내부로 감추고 외부에는 쉽게 변경되지 않을 인터페이스를 제공한다.

## 모듈의 장점
- 모듈 내부의 변수가 변경되더라도 모듈 내부에만 영향을 미친다.
- 비즈니스 로직과 사용자 인터페이스ㅔ 대한 관심사를 분리한다.
- 전역 벽수와 전역 함수를 제거함으로써 네임스페이스 오염을 방지한다.
> 모듈은 데이터와 함수가 통합된 한 차원 높은 추상화를 제공하는 설계 단위

## 추상 데이터 타입
- 추상 데이터 타입을 구현하려면 다음과 같은 특성의 프로그래밍 언어의 지원이 필요하다.
    - 타입 정의를 선언할 수 있어야 한다.
    - 타입의 인스턴스를 다루기 위해 사용할 수 있는 오퍼레이션의 집합을 정의할 수 있어야 한다.
    - 제공된 오퍼레이션을 통해서만 조작할 수 있도록 데이터를 외부로부터 보호할 수 있어야 한다.
    - 타입에 대해 여러 개의 인스턴스를 생성할 수 있어야 한다.
## 클래스
- 클래스와 추상 데이터 타입의 핵심적인 차이는 “상속”과 “다형성”을 지원하는 클래스와 그렇지 못한 추상 데이터 타입이다.
- 상속과 다향성을 지원하면 객체지향 프로그래밍, 그렇지 못하면 객체기반 프로그래밍이라 부른다.
- 추상 데이터 타입: 오퍼레이션을 기준으로 타입을 묶음, 객체지향 : 타입을 기준으로 오퍼레이션을 묶음

데이터-주도 설계 - 추상 데이터 타입의 접근법을 객체지향 설계에 구현 

## 협력이 중요
- 협력이라는 문맥을 고려하지 않고 객체를 고립시킨 채 오퍼레이션의 구현 방식을 타입별로 분배하는 것은 올바른 접근법이 아니다.
- 객체지향은 기능을 수행하기 위해 객체들이 협력하는 방식에 집중
- 타입 계층과 다형성은 협력이라는 문맥 안에서 책임을 수행하는 방법에 관해 고민한 결과물이어야 하며 그 자체가 목적이 되어서는 안된다.

* 프로시저 : 프로그램을 여러개의 단위로 분해한 것을 프로시저라고 한다. (크게 서브 프로시저와 함수 프로시저로 구분) , 반복적으로 실행되거나 유사한 작업들을 하나의 장소를 모아 재사용하고 중복을 방지할 수 있는 추상화 방법
