## 의존성이란
- 읜존성은 실행 시점과 구현 시점에 서로 다른 의미를 가진다.
```text
실행 시점 : 의존하는 객체가 정상적으로 동작하기 위해서는 실행 시 의존 대상 객체가 반드시 존재해야 한다.
구현 시점 : 의존 대상 객체가 변경될 경우 의존하는 객체도 함께 변경해야 한다.
```

## 의존성 전이
A클래스가 B클래스를 의존할 경우 A는 B가 의존하는 대상에 대해서도 자동적으로 의존하게 된다.
의존성이 전이될 수 있기 때문에 `직접 의존성`과 `간접 의존성`으로 나누기도 한다.

## 런타임 의존성과 컴파일타임 의존성
런타임 의존성 : 어플리케이션이 실해오디는 시점에 의존
컴파일타임 의존성 : 컴파일 하는 시점에 의존 (간혹 코드 그 자체를 가리키기도 한다.)

## 의존성 해결
- 객체를 생성하는 시점에 생성자를 통해 의존성 해결
- 객체 생성 후 setter 메서드를 통해 의존성을 해결
- 메서드 실행 시 인자를 이용해 의존성 해결

## new는 해롭다
- new 연산자를 사용하기 위해서는 구체 클래스의 이름을 직접 기술해야한다. 따라서 new를 사용하는 클라이언트는 추상화가 아닌 구체 클래스에 의존할 수 밖에 없기 떄문에 결합도가 높아진다.
- new 연산자는 생성하려는 구체 클래스뿐만 아니라 어떤 인자를 이용해 클래스의 생성자를 호출해야 하는지도 알아야 한다. 따라서 new를 사용하면 클라이언트가 알아야 하는 지식의 양이 늘어나기 떄문에 결합도가 높아진다.




